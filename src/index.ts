/**
 * nflreadts - TypeScript port of nflreadpy/nflreadr
 * Access NFL data from the nflverse ecosystem
 *
 * @packageDocumentation
 */

export { version } from './version.js';

// Configuration
export {
  configure,
  getConfig,
  ConfigManager,
  DEFAULT_CONFIG,
  detectEnvironment,
  loadConfigFromEnv,
} from './config/index.js';

export type {
  NflReadConfig,
  PartialNflReadConfig,
  HttpConfig,
  CacheConfig,
  DataSourceConfig,
  LogConfig,
  Environment,
} from './config/index.js';

// Types
export type {
  Season,
  Week,
  SeasonType,
  TeamAbbr,
  PlayerId,
  GameId,
  PlayId,
  Position,
  Side,
  Conference,
  Division,
  FullDivision,
  PlayType,
  Down,
  GameStatus,
  DateString,
  Timestamp,
  Team,
  TeamMap,
  TeamColors,
  ValidTeamAbbr,
  HistoricalTeamAbbr,
  AnyTeamAbbr,
  Player,
  PlayerStatus,
  RosterEntry,
  PlayerStats,
  PassingStats,
  RushingStats,
  ReceivingStats,
  DefensiveStats,
  KickingStats,
  RequireFields,
  OptionalFields,
  Nullable,
  NullableFields,
  UnwrapPromise,
  ArrayElement,
  DeepReadonly,
  FilterOptions,
  LoadOptions,
  PaginatedResponse,
  DataState,
  Range,
  SeasonRange,
  WeekRange,
  Result,
} from './types/index.js';

export {
  NFL_TEAMS,
  HISTORICAL_TEAMS,
  isSuccess,
  isError,
  isLoading,
  ErrorCode,
  NflReadError,
  NetworkError,
  TimeoutError,
  RateLimitError,
  DataNotFoundError,
  InvalidDataError,
  ValidationError,
  Ok,
  Err,
  isOk,
  isErr,
  unwrap,
  unwrapOr,
  mapResult,
  mapError,
} from './types/index.js';

// Utilities
export type { DataFileType, FileFormat, CsvParseOptions, ParseResult } from './utils/index.js';

export {
  // Validation
  MIN_SEASON,
  MAX_REGULAR_SEASON_WEEK,
  MAX_PLAYOFF_WEEK,
  SEASON_TYPES,
  getCurrentSeason,
  isValidSeason,
  assertValidSeason,
  isValidWeek,
  assertValidWeek,
  isValidTeam,
  isValidTeamOrHistorical,
  assertValidTeam,
  isValidSeasonType,
  assertValidSeasonType,
  isValidPlayerId,
  assertValidPlayerId,
  validateSeasons,
  validateTeams,
  normalizeTeamAbbr,
  // Date/time
  parseDate,
  formatDate,
  getToday,
  getSeasonFromDate,
  getSeasonStartDate,
  getSeasonEndDate,
  isDateInSeason,
  getCurrentWeek,
  generateSeasonRange,
  generateWeekRange,
  getWeeksForSeasonType,
  isFutureDate,
  isPastDate,
  daysBetween,
  addDays,
  formatDateLong,
  formatDateShort,
  // URL
  buildNflverseUrl,
  buildPbpUrl,
  buildPlayerStatsUrl,
  buildRosterUrl,
  buildWeeklyRosterUrl,
  buildScheduleUrl,
  buildTeamsUrl,
  buildPlayersUrl,
  buildParticipationUrl,
  buildDepthChartsUrl,
  buildInjuriesUrl,
  buildDraftPicksUrl,
  buildContractsUrl,
  buildNextGenStatsUrl,
  buildSnapCountsUrl,
  buildQueryString,
  addQueryParams,
  getFilenameFromUrl,
  isNflverseUrl,
  normalizeUrl,
  joinUrlParts,
  // Parse
  parseCsv,
  parseCsvFromResponse,
  parseJson,
  parseJsonFromResponse,
  parseNumber,
  parseBoolean,
  parseIntSafe,
  parseFloatSafe,
  cleanColumnName,
  transformCsvHeader,
  detectDelimiter,
  toCsv,
  csvToJson,
  jsonToCsv,
  // Logger
  LogLevel,
  Logger,
  getLogger,
  resetLogger,
  createLogger,
} from './utils/index.js';
